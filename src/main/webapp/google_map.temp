<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
    <style type="text/css">
        .labels {
            color: black;
            background-color: white;
            font-family: "Lucida Grande", "Arial", sans-serif;
            font-size: 10px;
            font-weight: bold;
            text-align: center;
            border: 1px solid #888888;
            padding: 5px;
            white-space: nowrap;
            transform: translateY(-20px);
        }
    </style>
</head>
<body onload="initMap()">
<div id="map_canvas" class="map" style="height: 600px;width: 450px;"></div>
<!--<script type="text/javascript" src="http://maps.google.com/maps/api/js?key=YOURKEY&sensor=false"></script>-->
<!--注意 此处使用的是国内开发环境js sdk 上线后需替换为.com后缀+公司的google appkey-->
<script type="text/javascript" src="http://maps.google.cn/maps/api/js?sensor=false"></script>
<script type="text/javascript">
    function inherits(childCtor, parentCtor) {
        /* @constructor */
        function tempCtor() {
        }
        tempCtor.prototype = parentCtor.prototype;
        childCtor.superClass_ = parentCtor.prototype;
        childCtor.prototype = new tempCtor();
        /* @override */
        childCtor.prototype.constructor = childCtor;
    }
    function MarkerLabel_(marker, crossURL, handCursorURL) {
        this.marker_ = marker;
        this.handCursorURL_ = marker.handCursorURL;
        this.labelDiv_ = document.createElement("div");
        this.labelDiv_.style.cssText = "position: absolute; overflow: hidden;";
        this.eventDiv_ = document.createElement("div");
        this.eventDiv_.style.cssText = this.labelDiv_.style.cssText;
        this.eventDiv_.setAttribute("onselectstart", "return false;");
        this.eventDiv_.setAttribute("ondragstart", "return false;");
        this.crossDiv_ = MarkerLabel_.getSharedCross(crossURL);
    }
    inherits(MarkerLabel_, google.maps.OverlayView);
    MarkerLabel_.getSharedCross = function (crossURL) {
        var div;
        if (typeof MarkerLabel_.getSharedCross.crossDiv === "undefined") {
            div = document.createElement("img");
            div.style.cssText = "position: absolute; z-index: 1000002; display: none;";
            // Hopefully Google never changes the standard "X" attributes:
            div.style.marginLeft = "-8px";
            div.style.marginTop = "-9px";
            div.src = crossURL;
            MarkerLabel_.getSharedCross.crossDiv = div;
        }
        return MarkerLabel_.getSharedCross.crossDiv;
    };
    MarkerLabel_.prototype.onAdd = function () {
        var me = this;
        var cMouseIsDown = false;
        var cDraggingLabel = false;
        var cSavedZIndex;
        var cLatOffset, cLngOffset;
        var cIgnoreClick;
        var cRaiseEnabled;
        var cStartPosition;
        var cStartCenter;
        // Constants:
        var cRaiseOffset = 20;
        var cDraggingCursor = "url(" + this.handCursorURL_ + ")";
        // Stops all processing of an event.
        var cAbortEvent = function (e) {
            if (e.preventDefault) {
                e.preventDefault();
            }
            e.cancelBubble = true;
            if (e.stopPropagation) {
                e.stopPropagation();
            }
        };
        var cStopBounce = function () {
            me.marker_.setAnimation(null);
        };
        this.getPanes().overlayImage.appendChild(this.labelDiv_);
        this.getPanes().overlayMouseTarget.appendChild(this.eventDiv_);
        // One cross is shared with all markers, so only add it once:
        if (typeof MarkerLabel_.getSharedCross.processed === "undefined") {
            this.getPanes().overlayImage.appendChild(this.crossDiv_);
            MarkerLabel_.getSharedCross.processed = true;
        }
        this.listeners_ = [
            google.maps.event.addDomListener(this.eventDiv_, "mouseover", function (e) {
                if (me.marker_.getDraggable() || me.marker_.getClickable()) {
                    this.style.cursor = "pointer";
                    google.maps.event.trigger(me.marker_, "mouseover", e);
                }
            }),
            google.maps.event.addDomListener(this.eventDiv_, "mouseout", function (e) {
                if ((me.marker_.getDraggable() || me.marker_.getClickable()) && !cDraggingLabel) {
                    this.style.cursor = me.marker_.getCursor();
                    google.maps.event.trigger(me.marker_, "mouseout", e);
                }
            }),
            google.maps.event.addDomListener(this.eventDiv_, "mousedown", function (e) {
                cDraggingLabel = false;
                if (me.marker_.getDraggable()) {
                    cMouseIsDown = true;
                    this.style.cursor = cDraggingCursor;
                }
                if (me.marker_.getDraggable() || me.marker_.getClickable()) {
                    google.maps.event.trigger(me.marker_, "mousedown", e);
                    cAbortEvent(e); // Prevent map pan when starting a drag on a label
                }
            }),
            google.maps.event.addDomListener(document, "mouseup", function (mEvent) {
                var position;
                if (cMouseIsDown) {
                    cMouseIsDown = false;
                    me.eventDiv_.style.cursor = "pointer";
                    google.maps.event.trigger(me.marker_, "mouseup", mEvent);
                }
                if (cDraggingLabel) {
                    if (cRaiseEnabled) {
                        position = me.getProjection().fromLatLngToDivPixel(me.marker_.getPosition());
                        position.y += cRaiseOffset;
                        me.marker_.setPosition(me.getProjection().fromDivPixelToLatLng(position));
                        // This is not the same bouncing style as when the marker portion is dragged,
                        // but it will have to do:
                        try { // Will fail if running Google Maps API earlier than V3.3
                            me.marker_.setAnimation(google.maps.Animation.BOUNCE);
                            setTimeout(cStopBounce, 1406);
                        } catch (e) {
                        }
                    }
                    me.crossDiv_.style.display = "none";
                    me.marker_.setZIndex(cSavedZIndex);
                    cIgnoreClick = true; // Set flag to ignore the click event reported after a label drag
                    cDraggingLabel = false;
                    mEvent.latLng = me.marker_.getPosition();
                    google.maps.event.trigger(me.marker_, "dragend", mEvent);
                }
            }),
            google.maps.event.addListener(me.marker_.getMap(), "mousemove", function (mEvent) {
                var position;
                if (cMouseIsDown) {
                    if (cDraggingLabel) {
                        // Change the reported location from the mouse position to the marker position:
                        mEvent.latLng = new google.maps.LatLng(mEvent.latLng.lat() - cLatOffset, mEvent.latLng.lng() - cLngOffset);
                        position = me.getProjection().fromLatLngToDivPixel(mEvent.latLng);
                        if (cRaiseEnabled) {
                            me.crossDiv_.style.left = position.x + "px";
                            me.crossDiv_.style.top = position.y + "px";
                            me.crossDiv_.style.display = "";
                            position.y -= cRaiseOffset;
                        }
                        me.marker_.setPosition(me.getProjection().fromDivPixelToLatLng(position));
                        if (cRaiseEnabled) { // Don't raise the veil; this hack needed to make MSIE act properly
                            me.eventDiv_.style.top = (position.y + cRaiseOffset) + "px";
                        }
                        google.maps.event.trigger(me.marker_, "drag", mEvent);
                    } else {
                        // Calculate offsets from the click point to the marker position:
                        cLatOffset = mEvent.latLng.lat() - me.marker_.getPosition().lat();
                        cLngOffset = mEvent.latLng.lng() - me.marker_.getPosition().lng();
                        cSavedZIndex = me.marker_.getZIndex();
                        cStartPosition = me.marker_.getPosition();
                        cStartCenter = me.marker_.getMap().getCenter();
                        cRaiseEnabled = me.marker_.get("raiseOnDrag");
                        cDraggingLabel = true;
                        me.marker_.setZIndex(1000000);
                        mEvent.latLng = me.marker_.getPosition();
                        google.maps.event.trigger(me.marker_, "dragstart", mEvent);
                    }
                }
            }),
            google.maps.event.addDomListener(document, "keydown", function (e) {
                if (cDraggingLabel) {
                    if (e.keyCode === 27) { // Esc key
                        cRaiseEnabled = false;
                        me.marker_.setPosition(cStartPosition);
                        me.marker_.getMap().setCenter(cStartCenter);
                        google.maps.event.trigger(document, "mouseup", e);
                    }
                }
            }),
            google.maps.event.addDomListener(this.eventDiv_, "click", function (e) {
                if (me.marker_.getDraggable() || me.marker_.getClickable()) {
                    if (cIgnoreClick) { // Ignore the click reported when a label drag ends
                        cIgnoreClick = false;
                    } else {
                        google.maps.event.trigger(me.marker_, "click", e);
                        cAbortEvent(e); // Prevent click from being passed on to map
                    }
                }
            }),
            google.maps.event.addDomListener(this.eventDiv_, "dblclick", function (e) {
                if (me.marker_.getDraggable() || me.marker_.getClickable()) {
                    google.maps.event.trigger(me.marker_, "dblclick", e);
                    cAbortEvent(e); // Prevent map zoom when double-clicking on a label
                }
            }),
            google.maps.event.addListener(this.marker_, "dragstart", function (mEvent) {
                if (!cDraggingLabel) {
                    cRaiseEnabled = this.get("raiseOnDrag");
                }
            }),
            google.maps.event.addListener(this.marker_, "drag", function (mEvent) {
                if (!cDraggingLabel) {
                    if (cRaiseEnabled) {
                        me.setPosition(cRaiseOffset);
                        me.labelDiv_.style.zIndex = 1000000 + (this.get("labelInBackground") ? -1 : +1);
                    }
                }
            }),
            google.maps.event.addListener(this.marker_, "dragend", function (mEvent) {
                if (!cDraggingLabel) {
                    if (cRaiseEnabled) {
                        me.setPosition(0); // Also restores z-index of label
                    }
                }
            }),
            google.maps.event.addListener(this.marker_, "position_changed", function () {
                me.setPosition();
            }),
            google.maps.event.addListener(this.marker_, "zindex_changed", function () {
                me.setZIndex();
            }),
            google.maps.event.addListener(this.marker_, "visible_changed", function () {
                me.setVisible();
            }),
            google.maps.event.addListener(this.marker_, "labelvisible_changed", function () {
                me.setVisible();
            }),
            google.maps.event.addListener(this.marker_, "title_changed", function () {
                me.setTitle();
            }),
            google.maps.event.addListener(this.marker_, "labelcontent_changed", function () {
                me.setContent();
            }),
            google.maps.event.addListener(this.marker_, "labelanchor_changed", function () {
                me.setAnchor();
            }),
            google.maps.event.addListener(this.marker_, "labelclass_changed", function () {
                me.setStyles();
            }),
            google.maps.event.addListener(this.marker_, "labelstyle_changed", function () {
                me.setStyles();
            })
        ];
    };
    MarkerLabel_.prototype.onRemove = function () {
        var i;
        this.labelDiv_.parentNode.removeChild(this.labelDiv_);
        this.eventDiv_.parentNode.removeChild(this.eventDiv_);
        // Remove event listeners:
        for (i = 0; i < this.listeners_.length; i++) {
            google.maps.event.removeListener(this.listeners_[i]);
        }
    };
    MarkerLabel_.prototype.draw = function () {
        this.setContent();
        this.setTitle();
        this.setStyles();
    };
    MarkerLabel_.prototype.setContent = function () {
        var content = this.marker_.get("labelContent");
        if (typeof content.nodeType === "undefined") {
            this.labelDiv_.innerHTML = content;
            this.eventDiv_.innerHTML = this.labelDiv_.innerHTML;
        } else {
            this.labelDiv_.innerHTML = ""; // Remove current content
            this.labelDiv_.appendChild(content);
            content = content.cloneNode(true);
            this.eventDiv_.innerHTML = ""; // Remove current content
            this.eventDiv_.appendChild(content);
        }
    };
    MarkerLabel_.prototype.setTitle = function () {
        this.eventDiv_.title = this.marker_.getTitle() || "";
    };
    MarkerLabel_.prototype.setStyles = function () {
        var i, labelStyle;
        // Apply style values from the style sheet defined in the labelClass parameter:
        this.labelDiv_.className = this.marker_.get("labelClass");
        this.eventDiv_.className = this.labelDiv_.className;
        // Clear existing inline style values:
        this.labelDiv_.style.cssText = "";
        this.eventDiv_.style.cssText = "";
        // Apply style values defined in the labelStyle parameter:
        labelStyle = this.marker_.get("labelStyle");
        for (i in labelStyle) {
            if (labelStyle.hasOwnProperty(i)) {
                this.labelDiv_.style[i] = labelStyle[i];
                this.eventDiv_.style[i] = labelStyle[i];
            }
        }
        this.setMandatoryStyles();
    };
    MarkerLabel_.prototype.setMandatoryStyles = function () {
        this.labelDiv_.style.position = "absolute";
        this.labelDiv_.style.overflow = "hidden";
        // Make sure the opacity setting causes the desired effect on MSIE:
        if (typeof this.labelDiv_.style.opacity !== "undefined" && this.labelDiv_.style.opacity !== "") {
            this.labelDiv_.style.MsFilter = "\"progid:DXImageTransform.Microsoft.Alpha(opacity=" + (this.labelDiv_.style.opacity * 100) + ")\"";
            this.labelDiv_.style.filter = "alpha(opacity=" + (this.labelDiv_.style.opacity * 100) + ")";
        }
        this.eventDiv_.style.position = this.labelDiv_.style.position;
        this.eventDiv_.style.overflow = this.labelDiv_.style.overflow;
        this.eventDiv_.style.opacity = 0.01; // Don't use 0; DIV won't be clickable on MSIE
        this.eventDiv_.style.MsFilter = "\"progid:DXImageTransform.Microsoft.Alpha(opacity=1)\"";
        this.eventDiv_.style.filter = "alpha(opacity=1)"; // For MSIE
        this.setAnchor();
        this.setPosition(); // This also updates z-index, if necessary.
        this.setVisible();
    };
    MarkerLabel_.prototype.setAnchor = function () {
        var anchor = this.marker_.get("labelAnchor");
        this.labelDiv_.style.marginLeft = -anchor.x + "px";
        this.labelDiv_.style.marginTop = -anchor.y + "px";
        this.eventDiv_.style.marginLeft = -anchor.x + "px";
        this.eventDiv_.style.marginTop = -anchor.y + "px";
    };
    MarkerLabel_.prototype.setPosition = function (yOffset) {
        var position = this.getProjection().fromLatLngToDivPixel(this.marker_.getPosition());
        if (typeof yOffset === "undefined") {
            yOffset = 0;
        }
        this.labelDiv_.style.left = Math.round(position.x) + "px";
        this.labelDiv_.style.top = Math.round(position.y - yOffset) + "px";
        this.eventDiv_.style.left = this.labelDiv_.style.left;
        this.eventDiv_.style.top = this.labelDiv_.style.top;
        this.setZIndex();
    };
    MarkerLabel_.prototype.setZIndex = function () {
        var zAdjust = (this.marker_.get("labelInBackground") ? -1 : +1);
        if (typeof this.marker_.getZIndex() === "undefined") {
            this.labelDiv_.style.zIndex = parseInt(this.labelDiv_.style.top, 10) + zAdjust;
            this.eventDiv_.style.zIndex = this.labelDiv_.style.zIndex;
        } else {
            this.labelDiv_.style.zIndex = this.marker_.getZIndex() + zAdjust;
            this.eventDiv_.style.zIndex = this.labelDiv_.style.zIndex;
        }
    };
    MarkerLabel_.prototype.setVisible = function () {
        if (this.marker_.get("labelVisible")) {
            this.labelDiv_.style.display = this.marker_.getVisible() ? "block" : "none";
        } else {
            this.labelDiv_.style.display = "none";
        }
        this.eventDiv_.style.display = this.labelDiv_.style.display;
    };
    function MarkerWithLabel(opt_options) {
        opt_options = opt_options || {};
        opt_options.labelContent = opt_options.labelContent || "";
        opt_options.labelAnchor = opt_options.labelAnchor || new google.maps.Point(0, 0);
        opt_options.labelClass = opt_options.labelClass || "markerLabels";
        opt_options.labelStyle = opt_options.labelStyle || {};
        opt_options.labelInBackground = opt_options.labelInBackground || false;
        if (typeof opt_options.labelVisible === "undefined") {
            opt_options.labelVisible = true;
        }
        if (typeof opt_options.raiseOnDrag === "undefined") {
            opt_options.raiseOnDrag = true;
        }
        if (typeof opt_options.clickable === "undefined") {
            opt_options.clickable = true;
        }
        if (typeof opt_options.draggable === "undefined") {
            opt_options.draggable = false;
        }
        if (typeof opt_options.optimized === "undefined") {
            opt_options.optimized = false;
        }
        opt_options.crossImage = opt_options.crossImage || "http" + (document.location.protocol === "https:" ? "s" : "") + "://maps.gstatic.com/intl/en_us/mapfiles/drag_cross_67_16.png";
        opt_options.handCursor = opt_options.handCursor || "http" + (document.location.protocol === "https:" ? "s" : "") + "://maps.gstatic.com/intl/en_us/mapfiles/closedhand_8_8.cur";
        opt_options.optimized = false; // Optimized rendering is not supported
        this.label = new MarkerLabel_(this, opt_options.crossImage, opt_options.handCursor); // Bind the label to the marker
        google.maps.Marker.apply(this, arguments);
    }
    inherits(MarkerWithLabel, google.maps.Marker);
    MarkerWithLabel.prototype.setMap = function (theMap) {
        // Call the inherited function...
        google.maps.Marker.prototype.setMap.apply(this, arguments);
        // ... then deal with the label:
        this.label.setMap(theMap);
    };
    <!--region 初始化地图 并设置标记和标记的标签-->
    function initMap() {
        var isZoom = false;
        var center = {
            lat: 25,
            lng: 43
        };
        var maps = new google.maps.Map(document.getElementById('map_canvas'), {
            zoom: 5,
            center: center,
            mapTypeId: google.maps.MapTypeId.HYBRID
        });
        var triangleCoords = [{
            lat: 22.724619,
            lng: 39.012468,
            labelText: 'Petro Rabigh'
        }, {
            lat: 26.402403,
            lng: 50.139031,
            labelText: 'Dammam 1st.'
        }, {
            lat: 26.246962,
            lng: 49.982980,
            labelText: 'Dammam 2nd.'
        }, {
            lat: 25.935211,
            lng: 49.963497,
            labelText: 'Dammam 3rd.'
        }, {
            lat: 26.622294,
            lng: 49.547824,
            labelText: 'Al-Ahsa 1st.'
        }, {
            lat: 24.990532,
            lng: 50.328985,
            labelText: 'Al-Ahsa 2nd.'
        }, {
            lat: 25.269169,
            lng: 49.551411,
            labelText: 'Al-Ahsa 3nd.(Ahsa Oasis)'
        }, {
            lat: 29.775552,
            lng: 39.979539,
            labelText: 'Al-Jouf'
        }, {
            lat: 31.633002,
            lng: 38.873843,
            labelText: 'Al Shamal'
        }, {
            lat: 28.228670,
            lng: 46.351419,
            labelText: 'Hafr Al-Batin'
        }, {
            lat: 31.022259,
            lng: 41.106516,
            labelText: 'Arar'
        }, {
            lat: 24.645802,
            lng: 46.739883,
            labelText: 'Riyadh 1st.'
        }, {
            lat: 24.552838,
            lng: 46.890876,
            labelText: 'Riyadh 2nd.'
        }, {
            lat: 24.407484,
            lng: 46.874398,
            labelText: 'Riyadh 3rd'
        }, {
            lat: 26.232610,
            lng: 44.030779,
            labelText: 'Qassim 1st.'
        }, {
            lat: 26.211729,
            lng: 44.133033,
            labelText: 'Qassim 2nd.'
        }, {
            lat: 25.634483,
            lng: 45.766305,
            labelText: 'Sudair'
        }, {
            lat: 25.078529,
            lng: 45.156610,
            labelText: 'Shaqra'
        }, {
            lat: 24.691315,
            lng: 46.056888,
            labelText: 'Dhurma'
        }, {
            lat: 27.465522,
            lng: 41.796337,
            labelText: 'Ha’il'
        }, {
            lat: 26.261181,
            lng: 44.971910,
            labelText: 'Az-Zulfi'
        }, {
            lat: 21.414624,
            lng: 39.225288,
            labelText: 'Jeddah 1st.'
        }, {
            lat: 21.110363,
            lng: 39.254198,
            labelText: 'Jeddah 2nd.'
        },{
            lat: 21.115407,
            lng: 39.332662,
            labelText: 'Jeddah 3rd'
        }, {
            lat: 24.310207,
            lng: 39.544498,
            labelText: 'AlMadina'
        }, {
            lat: 21.489187,
            lng: 39.792002,
            labelText: 'Makkah'
        }, {
            lat: 23.924813,
            lng: 47.269214,
            labelText: 'Al-Kharj'
        }, {
            lat: 28.488659,
            lng: 36.634851,
            labelText: 'Tabuk'
        }, {
            lat: 17.849386,
            lng: 44.408334,
            labelText: 'Najran'
        }, {
            lat: 17.058929,
            lng: 42.899991,
            labelText: 'Jazan'
        }, {
            lat: 20.346918,
            lng: 41.644735,
            labelText: 'Al-Baha'
        }, {
            lat: 19.546732,
            lng: 41.173458,
            labelText: 'Al-Baha 2nd.'
        }, {
            lat: 21.906084,
            lng: 39.291070,
            labelText: 'Jeddah Oasis'
        }, {
            lat: 24.161867,
            lng: 38.052434,
            labelText: 'Yanbu Oasis'
        }, {
            lat: 23.925632,
            lng: 47.267808,
            labelText: 'Al Kharj'
        }, {
            lat: 18.342673,
            lng: 42.664059,
            labelText: 'Assir'
        }
        ];
        for (var i = 0; i < triangleCoords.length; i++) {
            var marker = new MarkerWithLabel({
                position: new google.maps.LatLng(triangleCoords[i].lat, triangleCoords[i].lng),//读取的经纬度
                map: maps,
                labelContent: triangleCoords[i].labelText,
                labelAnchor: new google.maps.Point(25, 40),
                labelClass: "labels", // the CSS class for the label
                labelStyle: {opacity: 1}
            });
            (function (marker) {
                marker.addListener('click', function () {
                    if (!isZoom) {
                        isZoom = true;
                        maps.setZoom(18);
                        maps.setCenter(marker.getPosition());
                    } else {
                        isZoom = false;
                        maps.setZoom(5);
                        maps.setCenter(center);
                    }
                });
            })(marker);
        }
    }
    <!--endregion-->
</script>

</body>
</html>
